<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAACMuAAAjLgAAAAAAAAAA
        AADc3Ny32dnZtdrZ2Lrc2tjQ29rY4tva2PHa2dj929rZ/tva2f7b2tn+29rZ/tva2f/b2tn/29rZ/trZ
        1/Ta2dfx29nY8dvZ1/Hb2djy3NrZ6Nza2dfb2djB3tzbr9rY1pDZ19WH3NrZh97c24fe3NqH3NrYh9bW
        1YjPz8+Kzc3Ni6CgoNuXl5jpiIuP/IeMkf2Gi5D+houR/oaLkf2Gi5H8houR/IaLkfyGi5H8houR/IaL
        kf2Gi5D9houR/oeLkf6Gi5D+houR/oaLj/6Gio7+hYmN/YWJjfyEiI38hImN+4SIjfuEiIv7g4eK+4OH
        i/uEhor7i4uN8piYmNyenp7XSUdFQys0PYwDJkn/BTdo/wg5aP4JOmr+Cjpq/gs7a/4KO2r+Cjpq/gg4
        aP4IOGj+CDho/gg4aP4IOWj+CDlo/gg5aP4IOWn+CTdm/ggyXv4HL1j+CC5W/gguVf4ILlX+ByxT/gcq
        Tv4FJEf+AR8//wAWNP8kKzfJTEtKVVNTUzn///8BU2R0PCdKbb0jUH3QFjxh7xE0WP8QNFf/DDBU/w4x
        Vf8PMlb/FDdb/xM2Wv8TNlr/EzZa/xM3Wv8TN1r/Ezda/xM3Wv8SNVn/EjVX/xM0Vf8PLkz/DChG/w0o
        Rf8RLEn/DipH/xEsSfQhPFrTITVSyE5WZXmamJMQf4GDAMzDugDa0McHsKefJHl0cFAsKynHIB8e/yYk
        I/8VExL/FRIS/z48PP9VVFP/U1JQ/1NSUf9TUlD/UlBP/1BPTv9OTUv/SkhH/0VEQv9BQD7/QkJB/zY2
        NP8YFxb/FxUU/ycmJP8fHh3/IyIi23FvbGCPi4UvpqOeEgAAAAD///8AAAAAAAAAAACOjo0ArKyrIDIy
        MbYoKCf/MTEx/yYpK/8uOED/ZmVl/359ff97enr/e3p6/3t6ev97enr/e3p6/3h3d/91dHT/cG9v/2Zm
        Zf9eXl3/TUtK/zZETv8tOD//Ly4u/ycnJ/8oKCjOkI+PM4OCggAAAAAAAAAAAAAAAAAAAAAAAAAAALi4
        uQD///8KMjIymCgoKP8tLCv/LjhA/0Veb/9oZmb/enp6/3d3d/93d3f/d3d3/3h4eP9wcHD/dnZ2/3h4
        eP93d3f/dXV1/2pqav9OTEr/Q1xr/zlQXv8rKSj/JiYm/ycnJ7To6OoUuLi5AAAAAAAAAAAAAAAAAAAA
        AAAAAAAA9fX1AAUFBQA/Pz9vKysr8iwrK/8oLC3/LTQ3/29ubv99fX3/eHh4/3d3d/95eXn/ZmZm/2ho
        aP9iYmL/eHh4/3d3d/94eHj/dnZ2/2BeXv8rMTX/KC0w/ywrK/8nJyf3Pj4+iAAAAAD6+voAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAd3d3AICAgEMtLS3YKSkp/ywsLP8pKCf/cnJy/39/f/99fX3/e3t7/3t7
        e/9eXl7/fX19/11dXf93d3f/eHh4/3d3d/94eHj/ZWVl/ycmJv8oKCj/Kysr/yIiIuCMjIxHioqKAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADDw8MA+fn5Ei0tLbEpKSn/LCws/ywsLP90dXT/f39//35+
        fv9+fn7/fn5+/3V1df9hYWH/cHBw/3l5ef94eHj/eHh4/3l5ef9oaGj/KSkp/ykpKf8nJyf+Li4uttHR
        0RLFxcUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wALCwsAUVFRcycnJ/ArKyv/MDAw/3p6
        ev+CgoL/gYGB/4GBgf+BgYH/goKC/4SEhP+BgYH/gICA/4CAgP+AgID/gYGB/3Jycv8vLy//KSkp/x4e
        Hu1vb29ednZ2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJqamgCenp4oKioqyCgo
        KP8rKyv/ZmZm/3Z2dv90dHT/dHR0/3R0dP90dHT/c3Ny/3Rzc/90dHT/dHR0/3R0dP92dnb/Y2Nj/ysr
        K/8cHBz7Ojo6qqurqxTPz88AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AP//
        /wFaWlplICAg7CUlJf8sLCz/LCws/ycnJ/8nJyf/JiYm/yQjI/8lJCT/JCIi/yUkJP8mJib/Jycn/yoq
        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
        AP//AAH//4AB//+AA///wAf//4AP///4H/8=
</value>
  </data>
</root>